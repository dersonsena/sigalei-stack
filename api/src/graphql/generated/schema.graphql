schema {
  query: Query
  mutation: Mutation
}

"Task queries"
type Query {
  # Get a task
  """
  Get a task
  """
  task(id: String!): Task
  # Get all tasks
  """
  Get all tasks
  """
  tasks: [Task]
  # Get a user
  """
  Get a user
  """
  user(id: String!): User
  # Get a user
  """
  Get a user
  """
  users(first: Int = 10, after: String, last: Int, before: String): UserConnection
  # Get user credentials
  """
  Get user credentials
  """
  login(email: String!, password: String!): AuthToken
}

"Task mutations"
type Mutation {
  # Create a task
  """
  Create a task
  """
  createTask(content: String!): Task
  # Sign up a new user
  """
  Sign up a new user
  """
  signUp(email: String!, password: String!): User
}

interface Connection {
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Node: represents a node interface
"""
interface Node {
  # The ID of the object
  """
  The ID of the object
  """
  id: ID!
}

"""
PageInfo: represents informations form a page
"""
type PageInfo {
  # When paginating forwards, the cursor to continue
  """
  When paginating forwards, the cursor to continue
  """
  endCursor: String
  # When paginating forwards, are there more items?
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue
  """
  When paginating backwards, the cursor to continue
  """
  startCursor: String
}

"""
Task: represents a task
"""
type Task implements Node {
  # Task id
  """
  Task id
  """
  id: ID!
  # Task content
  """
  Task content
  """
  content: String
  # The completed status of a task
  """
  The completed status of a task
  """
  completed: Boolean
  # The use of the task
  """
  The use of the task
  """
  user: User
}

"""
AuthToken: represents a users authentication token
"""
type AuthToken {
  # Token
  """
  Token
  """
  token: String!
  # User
  """
  User
  """
  user: User!
}

"""
User: represents a user
"""
type User implements Node {
  # User id
  """
  User id
  """
  id: ID!
  # User email
  """
  User email
  """
  email: String
  # User password
  """
  User password
  """
  password: String
  # The user tasks
  """
  The user tasks
  """
  tasks(first: Int = 10, after: String, last: Int, before: String): UserTasksConnection
}

type UserConnection implements Connection {
  pageInfo: PageInfo!
  edges: [UserEdge]
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User
}

type UserTasksConnection {
  pageInfo: PageInfo!
  edges: [UserTasksEdge]
  totalCount: Int!
}

type UserTasksEdge {
  cursor: String!
  node: Task
}
